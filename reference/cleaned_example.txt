이제와 acr을 나눈다 이게 좀 굉장히 지금 이해하기 쉽지만 문의가 생각보다 굉장히 많이 들어옵니다 그래서 우리 vm 배포하는데 어디에 저장해요 아니면 컨테이너 배포인데 뭐 이런거 해야 돼요 뭐 이런 식이 많기 때문에 좀 이해를 하시면 좋을 것 같고 그럼 이제 vm 배포할 때 어떤 툴을 쓰느냐 저희는 젠킨스를 제공을 하고 있어요 그래서 젠킨스를 안 써보셨다면 굉장히 좀 재밌는 툴인데 우선, 오픈소스 CI, CD 자동화 서버로 소프트웨어 빌드, 테스트, 배포를 자동화하는 툴이다. 플러그인 기반 아키텍처로 다양한 개발 환경과 도구를 확장 가능하다. 플러그인이 엄청 많거든요. 그래서 이 오픈소스가 CI, CD 쪽에서 굉장히 유명한 툴이라서 한번 써보셨으면 좋겠고. 그 다음에 독립 실행용 서버 또는 컨테이너에서 실행 가능하다. 그러니까 이 얘기는 그냥 온프렘이나 VM 같은 거에, 얘가 이제 Java 기반이거든요 그래서 그냥 JVM 프로세스로 띄워도 되고 Java 프로세스로 띄워도 되고 그 다음에 컨테이너 이미지를 제공하기 때문에 도커로 띄워도 되고 그게 아니라 이제 클러스터링을 해서 얘를 좀 서비스 안정성을 가져가서 조금 더 GitOps나 CICD에 맞춰서 컨테이너 환경에 맞춰서 쓰고 싶다 이러면 K-Press에 설치할 수 있는 기능을 지원하는 Jenkins X라는 툴이 있습니다 그런 식으로 여러 가지를 제공하고 있고 또 자유로운 CICD 파이프라인이 구성하기 때문에 그룹이라는, 혹시 그룹이 언어 해보신 분 없으실 거예요. 그룹이 진짜 좀 오래된 언어고요. 그 다음에 yam을 요즘 많이 쓰니까 이런 스크립트로 CICD 파이프랜이 구성 가능하다. 쉽죠? 그 다음에 이제 Argo CD 같은 경우는 여러분들 조금씩 해보셨으니까 Kubernetes 환경에서 GitOps 방식을 활용한 선언적 어플리케이션 배포 및 동기화 도구이다. 그 다음에 Git을 싱글 소스로 활용해서 Kubernetes 클러스터 상태를 자동 조정하는 기능이 있다. UI 미시아이를 통해서 실시간 상태 모니터링을 지원한다 기독스 기반으로 배포 일관성 이런 여러 가지 기능이 있네요 여러분 기독스에 대해서 좀 알고 계신가요? 기독스에 대해서 들어봤다 들어보셨나요? 기독스라는 거는 그러니까 여기에 써있듯이 Git을 싱글 소스로 활용한다는 뜻이에요 이제 여러분들이 배포를 할 때 Jenkins든 ArgoCity든 공통적으로 필요한 거는 파이프라인 스크립트거든요 그러니까 둘 다 야물을 기반으로 쓸 수 있고 ArgoCD 같은 경우에는 Kubernetes 기반이기 때문에 Kubernetes가 알아들을 수 있는 형태로 이 야물을 정의를 해줘야 돼요. 그게 이제 ArgoCD 해보셨다 하셨으니까 뭐가 있을까요? 디플로이먼트 작성해보셨나요? Kubernetes 배포할 때 디플로이먼트를 기반으로 디플로이먼트 딱 뿌리면 레플리카 세트 떠가지고 파드가 알아서 뜨잖아요. 거기에 이제 본인들이 지정한 파드 개수만큼 그런 식으로 야물에 대해서 정의를 해야 되는데 이 야물 파일을 어디서 관리할까요? 야물 파일도 코드이기 때문에 GitHub에서 저희는 관리를 합니다. 그래서 GitOps라는 것은 이 ArgoCG라는 자동화 툴이 배포할 AKS Kubernetes 환경이랑 이 GitHub에 정의된 이 야물 환경을 매치시켜주는 역할을 해요. 그거를 이제 GitOps라고 하는 거고 거기서 가장 중요한 점은 이 소스 코드를 Git으로 관리한다는 건데요. 이 Git의 소스 코드를 업데이트할 때 여러분들 그냥 로컬에서 하면 Git 클론 받아서 단순히 수정한 다음에 편하게는 그냥 스테이터스 한번 확인하고 Git add 찍고 그 다음에 바로 커밋하고 푸시 올리잖아요. 안 올라가면 푸시, 포스 이런 거 하고 그런 식으로 이제 하면 안 됩니다. 이런 식으로 이제 하는데 여기에 이제 만약에 Git Hub에 버전 2의 야물 파일 업데이트가 됐어요. 그럼 AKS에 현재 떠 있는 상태는 버전 1이잖아요. 그럼 이 Argo CD가 버전 2와 버전 1의 매니페스트, 그러니까 상태값을 확인을 해서 이걸 매치시켜주는 자동화 역할을 한다는 거죠. 그런 식으로 클러스터 상태를 자동 조정한다. 이런 강점이 있습니다. 그래서 Argo CD는 잘 알아두시면 좋을 것 같고 쿠버네틱스 환경에서 배포하는 데 많이 쓰고 있어요. 이런 식으로 KT에서 꾸려놨다. 그래서 KT 애저 환경과 CLC 비속의 및 서비스 둘러보기까지 하고 이제 쉬는 시간 잠깐 가질 건데 아까 보여드렸던 것처럼 이 DevOps 툴체인에 KT가 그럼 진짜 쓰고 있는 것들이 뭔지에 대해서 간단하게 말씀드릴게요. 이제 좀 PM분들이나 프로젝트 관리하는 분들 아니면 개발자분들도 이렇게 플래닝 단계에서 Jira 또는 Wiki를 많이 쓰고 있어요. Jira, Wiki 둘 다 데이터 센터형으로 구축이 되어 있고 여러분들 혹시 이쪽 들어가 보셨나요? 여기 이 위키페이지 혹시 아시나요? 이 컴플루언스라고 써있는 거 여기가 저희 팀에서 운영하는 데이터 센터형 컴플루언스 페이지예요 그래서 이런 식으로 여러 가지 지식 공유를 할 수 있는 페이지를 운영하고 있고 혹시 지라도 한 번씩 들어가 보셨을까요? Jira가 이제 이런 이슈 트래킹을 하는 툴이다 보니까 프로젝트 하나하나마다 어떤 이슈가 있는지 거기에 대해서 이런 간트찬트를 만들 수도 있고 프로젝트 진행률도 확인할 수 있고 이런 식으로 현재 도입을 해 놨고요 그 다음에 이제 코드에서 관리를 하는 GitHub 엔터프라이즈를 들어가 볼 건데 KT에서 구성해 놓은 기타 웬더프라이즈는 첫 번째 도메인은 github.com이거든요 이걸 크게 보여드리려면 어떻게 해야 될까 채팅에 들어가야 되나? 채팅에다 드릴게요 만약에 아직 bpm 플러스가 안 끝났다 그러면은 라이센스가 없어서 접속이 안 되시는 게 맞을 거고 엔트라 아이디까지 인증은 될 건데 아마 서비스가 안 들어가질 수도 있어요 근데 어쨌든 참고차 한번씩 들어가 보시고 GitHub Enterprise를 꾸려놔서 이거를 SaaS형으로 쓰고 있습니다 채팅에 올려드렸으니까 그거 한번씩 보시면 됩니다 슬랙에 넣으면 되는 건가? 이거는 이제 ctna나 pvpn 이런 식으로 해서 개발 맥에서도 들어갈 수 있어요 IP요? 아 그러면은 IP Allow List를 뚫어야 되는데 우선은 지금 화면만 보시고요 좀다가 확인해 보겠습니다 그래서 GitHub Enterprise를 쓰고 있고 앞에 도메인을 갖고 이제 Enterprise 단위로 해서 우리는 KT Dev라는 이름으로 쓰고 있습니다 이쪽으로 접속을 하게 되면 KT 안에서 쓰는 GitHub SaaS 환경을 쓸 수 있다 여기서 이제 Organization이라는 단위가 있어요 Organization이라는 단위는 이렇게 쓱 보시면 이렇게 좀 알 수 없는 이런 코드란 프로젝트의 이름이 있죠 이게 이제 서비스팀이 본인들의 오버니제이션과 소스코드를 관리하는 곳인데요 오버니제이션 앞에 붙은 이걸 단위 서비스 코드라고 합니다 단위 서비스 코드라는 것은 KT에서 IT 프로젝트를 관리하기 위한 유니크한 값이라고 ID 값이라고 생각하시면 돼요 그래서 만약에 우리 팀이 간 데가 우리 팀은 조금 계시니까 우리 팀은 이게 단위 서비스 코드입니다 뭐 이런 식으로 이렇게 이해하시면 되고 본인들의 팀의 소스 코드 개발하는 분들이 있으시면 단위 서비스 코드가 하나씩 프로젝트마다 있을 거예요 그래서 이건 우리 거니까 보여드릴 수 있으니까 오버니데이션 안에 이제 좀 익숙한 화면이죠 그래서 이렇게 이 안에 레프트 스토리 이런 식으로 관리하고 있고 하나하나가 여러분들이 친숙하게 알고 있는 레프트 스토리입니다 그래서 제가 짜놓은 거 뭐 하나 볼까요? 별거 없는데 뭐 있을까 여기 함수 액션 테스트 뭐 하나 있죠 그래서 워크플로우를 제가 몇 개씩 좀 테스트해 본다고 써놓은 게 있고 예를 들어 다들 워크플로우 한 번씩 짜보셨으니까 이런 식으로 이제 기타 액션을 쓸 수 있는 파이프라인을 관리하는 거죠 얘를 직접 실질적으로 돌리는 거는 이 액션이라는 탭에서 이제 실행을 하게 되고 다 틀렸네? 빌드가 잘 안 됐네요 그래서 민망한 모습도 볼 수 있고 이런 식으로 이제 GitHub을 쓸 수 있다 그리고 하나 약간 참고차 말씀드리자면 저희 KT는 이제 CICD를 전부 자동화가 되면 좋겠지만 그러니까 GitHub 액션에 올라간 소스 코드를 하나의 파이프라인 그러니까 GitHub 액션 파이프라인 하나로 빌드부터 배포까지 되면 좋잖아요 근데 그게 이제 사실 운영하는 입장이나 보완적인 면으로나 좀 CIC를 하나의 사이클로 자동화하는 거는 굉장히 위험한 부분이 있어요 예를 들어 소스코드 검증이 제대로 안 끝났는데 이게 상용 배포가 된다거나 뭐 그런 뭐 단순하게 얘기하자면 그런 경우가 있겠죠 그런 식으로 해서 좀 어려운 경우가 있어서 이 GitHub 액션을 통해서 할 수 있는 거는 소스코드를 확인하는 체크아웃 단계 그 다음에 언어세팅, 파이썬 쓰겠다 하면 파이썬 액션 가져와서 3점 몇 점 버전을 쓰고 그 소스 코드를 컴파일하고 아까 말씀드린 블록 스토리지나 아니면 ACI 같은 저장소에 올리는 CI 단계까지만 기타 액션을 쓸 수 있어요. 그 외에 CD 파이프라인을 쓰려고 한다면 아마 연동이 안 돼서 막히실 겁니다. 그래서 CI까지만 할 수 있고 그다음에는 CD 툴로 들어가서 Jenkins나 Argo CD에 들어가서 각각의 연결된 파이프라인들을 통해서 배포를 하는 게 현재 표준이고요 이렇게 해서 GitHub 엔터프라이즈를 꾸려놨구나 이해하시면 될 것 같고 이렇게 해서 이제 저장소를 봐야겠죠 만약에 우리가 VM 배포를 할 거다 그러면은 글로벌 스토리지에 저장이 된다고 말씀드렸죠 애저 포털 혹시 한 번 들어가 보셨나요? 여기에 이제 스토리지 어카운트라는 서비스가 있습니다 스토리지 어카운트라는 서비스는 이 객체 저장소를 객체 파일들을 저장하는 것뿐만 아니라 여러 가지 기능을 하는데 저희 구독으로 보여드리자면 뭐 대북스 이런 식으로 저희가 내부적으로 쓰는 스토리지가 있거든요 그래서 여기에다가 데이터 스토리지 형상으로 컨테이너 근데 이 컨테이너는 여러분들이 알고 있는 그 도커 컨테이너가 아닙니다 이거는 내부적으로 컨테이너라는 논리적 구분을 해서 이 안에다가 어떤 객체 파일을 저장하겠다는 뜻이에요 그러니까 도커 컨테이너는 정말 컨테이너 프로세스를 띄우기 위한 형태인 거고 얘는 애저가 내부적으로 이 컨테이너라는 논리적 단위를 통해서 그러니까 책의 약간 목차를 나누는 부분이죠 거기를 이제 컨테이너라고 표현을 한 거고 저희는 뭐 단순하게 이걸 어떻게 쓸까 싶었을 때 GitHub 엔터프라이즈에서 발생하는 이 모든 어딘 로그 그러니까 이걸 또 어둠인 건 아니라서 녹화 중인가? 녹화 중이면 보여드리기는 좀 없고 로그라서 좀 그렇고 어쨌든 이 엔터프라이즈에서 발생하는 모든 어딘 로그를 계속 이제 로그 스태시를 하는 거죠 로그를 계속 쌓는 GitHub 어딘 로그 이런 것도 있고 그 다음에 테스트용으로 쓰고 있는 테스트 블록, VM 배포할 때 Jenkins가 잘 동작하는지 이런 걸 봐야 되니까 테스트 블록 이런 걸 쓰고 있고요 파일 공유 같은 거는 스토리지 어카운트를 인증을 하고선 이 파일 공유를 연동하게 되면 예를 들어 만약에 서비스의 VM이 10대예요 그런데 그 10대에다가 동일하게 공유할 파일이 필요해요 만약에 VM에 특정 파일을 업로드해서 업데이트 할 건데 그거를 직접 VM 한 대 한 대 한 대 들어가서 SFTP로 이런 거 이렇게 카피 떠서 그거를 동작하면 10번의 일을 해야 되잖아요 그런데 그러지 않고 파일 쉐어라는 걸 저장을 해두면 그 VM들이 바라보는 하나의 데이터 포인트를 모으는 거예요 그래서 정말 여러 인프라 단에서 이런 파일들을 쉐어할 수 있는 파일 공유라는 거를 쓰고 있고 저희는 이제 그 VM들을 관리할 때 이런 파일들을 쓰고 있고 queue랑 table 이런 것도 있는데 저는 안 써봤습니다 그래서 이런 식으로 데이터를 저장하는구나 VM 배포를 위해서는 스토리지 어카운트에 객체를 저장해서 배포를 하는구나 까지 보실 수 있고 그럼 이제 컨테이너도 저장을 해야 되잖아요 컨테이너 저장은 이것도 혹시 써보셨나요? 컨테이너 레지스트를 다 써보셨어요? 많이 하셨구나. 편하게 들으시고 이런 식으로 저희 구독에서는 여러가지 레지스트리를 다루고 있어요. 조금 있다가 말씀드릴 건데 크게 이거 위에 거 빼고 아래 세 개를 보자면 이름이 좀 특이하죠. kt-quarantine 이라는 거 있고 그때 코로나 때 많이 컸죠. kt-devops라는 이름이 있고 kt-base라는 이름이 있어요 이걸 조금 이따가 좀 더 디테일하게 말씀드릴 건데 우선 KT Quarantine과 DevOps와 Base를 크게 세 가지로 여러분들이 소프트웨어 개발을 할 때 이 레지스트리를 꼭 거치셔야 합니다 그 이유는 먼저 KT Quarantine이라는 ACR이 하는 역할은 여러분들이 이제 직접 쓰고 싶은 Docker 컨테이너 이미지가 있을 수 있어요 근데 KT는 Docker 허브랑 연동을 안 해놨습니다 왜냐하면 보안적으로 좀 문제가 있으니까 그럼 퍼블릭으로 뚫리는 건 N-Ganon은 다 안 해놨고 대신 도커 허브에 있는 이미지를 당연히 갖다 쓰고 싶잖아요 그런 베이스 이미지들을 갖다 쓸 때 KT Quarantine이라는 곳에 간단하게 말하자면 이제 도커 푸시를 하는 거예요 도커 푸시 용량으로 본인의 그런 로컬에 있는 이미지라든가 아니면은 로컬에 있는 이미지겠죠 푸시는 뭐하니 서버에 있는 이미지라든가 어쨌든 외부에 있는 이미지를 Azure 안에 들어올 수 있는데 꼭 이 엔트리 포인트 꼭 진입점이 돼야 되는 게 KT Quarantine 입니다. Quarantine에다가 Docker Push를 하게 되면 이 컨테이너 이미지를 보안적으로 이제 취약점이 없다는 프로세스가 내부적으로 돌아요. 그게 내부적으로 돌고 너넨 취약점이 없는 안전한 이미지구나 하게 되면 이 KT Base 라는 곳에 들어오는 거예요. KT Base에 들어온 이 Base라는 이름은 여러분들 그 파이프라인 짜보셨으면, dockerfile이라고 하면 이런 식으로 프롬졸에다가 어떤 이미지를 베이스로 쓸지 쓰잖아요 여기에 들어갈 베이스 이미지가 되는 거예요 그러니까 여러분들이 만약에 dockerfile에 파이썬 새로운 버전이 나왔어 근데 그게 kt 안에 없어 그러면은 그냥 로컬 pc에다가 dockerfile로 파이썬 10점이라고 할게요 레이티스트 하고 할게요. 파이썬 레이티스트 버전을 받아가지고 이 KT 퍼런틴에 올려요. 그러면 아직 이미지 검증이 되지 않은 파이썬 레이티스트가 올라가 있잖아요. 그러면 그게 안에 내부적으로 취업적 검토를 한 다음에 문제가 없는 이미지야 하면 KT 베이스로 들어가요. 그러면 이 이미지가 여러분들은 빌드를 KT 안에 기탑 액션이라는 공통된 환경에서 쓰셔야 하기 때문에 만약에 이게 여러분들 그냥 대학 과제에다 그러면 이제 이런 식으로 썼을 거예요 파이썬 레이저, 그쵸? 그러면 얘가 이제 태그 네임이 바뀌어야 되거든요 그러니까 이 kt-base라는 acr에서 이루어져야 하는 이 레지스트리명을 명시해야 되기 때문에 이런 식으로 이미지 변경이 필요합니다 그래서 이런 관리도 좀 필요하고 그래서 이 kt-base와 kt-quarantine은 굉장히 밀접한 관계에 있다 그러면 KT Devops는 뭐냐? Devops는 이제 사실 우리팀이 관리하는 레지스트리인데 Jenkins나 ArgoCity나 이런 표준 배포 툴들을 정의하고 이거를 또 관리하는 게 저희 팀 역할이거든요 여러분들은 서비스팀이라면 관련 없겠지만 우리는 Jenkins를 쓸 거야 하면 Jenkins의 형태도 도커 이미지로 제공이 돼요. 그러니까 VM에다가 배포를 하지만 VM Jenkins가 쓰는 프로세스는 저희가 카드맨을 쓰기 때문에, 카드맨 들어보셨죠? 도커 엔진을 안쓰고 카드맨을 쓰기 때문에 카드맨으로 이용하면 Jenkins는 컨테이너 프로세스가 되겠죠. 그러면 컨테이너 프로세스를 활성화하기 위해서는 컨테이너 이미지가 필요한데 이런 표준 이미지들을 관리하는 레지스트리가 DevOps 레지스트리입니다 그래서 이거는 사실 밀접하게 개발하는 분들이랑 별로 관련이 없고 이런 식으로 서비스팀에다가 뿌릴 공통된 표준된 이미지나 헬름 차트 같은 것들을 이런 식에서 중앙에서 관리하는 레지스트리 해서 이렇게 세 개를 이해하시면 됩니다 여기까지 해서 이제 acr에 대한 얘기를 해봤고 그 다음에 argocd가 있겠죠 그러면은 acr에 올린 이미지는 argocd에서 배포해야 돼 여러분들이 저보다 더 많이 해보셨을 것 같은데 어? 접속이 안 돼 잠시만요 왜 항상 보여 드릴 때마다 이러는 거지? 아, 제가 교육용을 하나 만들어 놨어요 자, 여기가 이제 저희가 이제 교육대... 안에 아무것도 아직 안 띄어 놨습니다 그래서 이 argocd라는 배포처리를 통해서 여러분들이 AKS 배포를 하면 돼요 이때 여러 가지 세팅값이 좀 필요한데 해보셨죠? 그 GitHub 통해서 어떤 야물파일들을 배포할 건지에 대한 이 레포스토리 설정이 필요하고 이 커넥트 레포에 그동안 좀 달랐던 게 여기에 이제 레포스토리 URL에 여러분들의 개인 레포스토리가 들어갔다면 이제 이 KT URL로 들어가야겠죠 여기에 본인 오리지션과 이제 레포스토리 이름이 들어가야 될 것 같고 그 다음에 우리는 이제 토큰 인증을 합니다 그래서 본인들의 유저 네임, 그러니까 여러분들 이름이 하나씩 이렇게 생성되거든요 승우함, underbar, kt, dev 이렇게 underbar, kt, dev가 표준으로 붙어요 그래서 여러분들 라이센스 받으면은 이게 기본으로 들어가기 때문에 이따가 같이 한번 확인을 해 보고 이런 식으로 이제 인증을 하고 그다음에 이제 개발자 토큰 만들어서 토큰 인증을 하게 되면은 커넥트로 레포스토리 연동이 될 거고 그 다음에는 사실 그냥 이제 여기서 New App 눌러가지고 여기서 이제 Sync해서 바로 배포하면 됩니다 이런 식의 간단한 구조이기 때문에 Argo CD도 이제 구성을 해 놨다 KT에서 이런 식으로 쓰고 이제 조금 더 딥한 내용 들어가기 전에 간단한 구조도만 보여 드리고 잠깐 쉬는 시간 갖겠습니다 이제 조금 더 이제 좀 실무적인 얘기하자면 첫 번째로 만약 여러분들이 개발자예요 그러면 이제 GitHub에 접속을 해야 되는데 GitHub을 접속하기 위해서는 저희는 Azure의 엔트라 아이디라는 거를 쓰고 있어요 그래서 마이크로소프트에 우리 KT 이메일을 기반으로 인증을 해서 ZTNA 환경이든 PVPN 환경이든 만약에 외부에서 붙겠다 하면 그렇게 쓸 수 있고 내부에서 붙겠다 하면 그냥 사내 PC로 접속하면 됩니다 URL로 접속하면 되고 이렇게 GitHub에다가 여러분들이 정성껏 작성한 소스코드를 업로드한 다음에 빌드를 해야겠죠 빌드를 할 때 이 GitHub Enterprise는 SaaS 서비스에요 그러니까 외부의 퍼블릭망에 있는 SaaS 서비스고 이거에 대한 실질적인 역할을 하는 여러분들 로컬이 꾸렸던 셀프 포스티드 러너 그러니까 이 워크플로우를 직접 돌릴 그 인프라 환경은 저희 그 Azure 사내 환경 안에 있습니다 그래서 그 환경 안에 있고 다 이제 현재는 VM으로 되어 있고 AKS로는 구성 중이에요 AKS에 대한 테스트도 우리 같이 해볼 거고 GitHub 액션을 돌려서 컴파일된 것들을 배포 환경으로, VM이냐 AKS냐에 따라서 Jenkins냐, Argo CD냐에 갈리고 또 여기다가 ACR이냐 Blob이냐로 나눠지게 되겠죠 이런 식으로 해서 배포를 하게 될 건데 여러분들이 서비스 팀이라면 Azure Service Workload라는 걸 하나씩 받을 거예요 그러니까 팀마다 할당된 Azure의 논리적인 구분, 즉 구독을 받게 될 건데 이 구독에 대한 방압적 신청을 하셔야 됩니다 어디서 해야 되냐, 이 러너라는 거는 저희가 공통적으로 제공하는 툴이고 업로드하는 곳 있잖아요. 블로비든, HR이든 이거는 서비스 팀마다 하나씩 고유하게 존재해요. 거기다가 방화벽 신청을 해야 이 러너에서 빌드된 것들이 여기다가 넘어가게 되는 거죠. 그건 이제 꼭 사전 작업을 해주셔야 되고. 그 다음에 마지막으로 이 Argo CD 같은 경우에는 저희가 AKS에 배포할 야물 형상들을 GitHub 엔터프라이즈에서 관리를 한다고 했어요. 그걸 GitOps라고 하는 거고 거기에 대해서 저희가 이제 어떻게 보면 이 Argo CD에서 아웃바운드로 SaaS로 나가는 거잖아요 이 트래픽 요청이 Argo CD에서 이렇게 정선 따라가 보시면 이렇게 Git Enterprise로 나가는 건데 이거를 저희가 중간에서 관리할 수 있는 Git proxy라는 서버를 만들어 놨습니다 이건 아웃바운드로 나가는 proxy 서버인 거예요 그래서 이 Argo CD에서 요청하는 것을 이 중간에서 proxy server가 처리를 해주는구나 그러면 여기에도 방압의 작업이 필요하겠죠 그래서 이렇게 크게 두 가지만 해소를 하시면은 이제 CRCG를 구성하실 수 있습니다 거기에 대한 기준, 어떤 IP로 해요 아니면 어떤 식으로 작업해야 돼요 라는 거는 조금 있다가 가이드 보여드리면서 말씀드리고 마지막으로 CD 툴들에 대한 접속을 해야죠 그래서 방금 보여드린 제 Argo CD는 제가 여러분 사내 IP 말씀 주신 걸로 다 이제 강화벽 작업을 해놨고 여러분들이 직접 들어가려면 원래는 IP 기반으로 Jenkins VM IP 또는 Argo CD에 Argo CD가 구성된 AKS에 뜨겠죠? 여러분들 띄워 보셨습니까? AKS에 로드밸런스 IP로 들어가야 되는데 그거는 조금 더 딥한 내용이니까 조금 이따가 말씀드리겠습니다 그래서 이런 식으로 KT 안에서 CICD가 구성되어 있고 여러분들은 뭐 강화벽 작업이나 아니면 일련의 이런 과정으로 KT 안에서 CICD를 할 수 있겠다라고 이해를 해주시면 될 것 같아요 그래서 지금 이제 곧 10시인데 한 50분 들으셨나요? 그렇죠? 10분에 시작했던 것 같은데 그럼 좀 쉬고 그동안 쉬는 시간 몇 분 주셨어요? 10분? 그러면 저희는 10시 15분에 시작하겠습니다 그래서 좀 편하게 쉬시다가 편하게 쉬시다가 10시 15분에 뵙겠습니다 그리고 또 이제 궁금하신 거 있으면 그냥 편안하게 물어봐 주셔도 될 것 같아요. 감사합니다. 그렇지. 거기 들 vest만 24장 뭐야? 네.uten. 정상으로 봤어 graduates than? True right. . Right, Key document in boxe. 하나 장면 주무신다고? 네, 맞습니다. 육ienen 조금张색하고 있습니다. 근데 원픽핸드 안 하고 oyun을 하고 있어요. 이거 개강하고는 이거 개강하고는 아, 선 AX니까 이게 지정했어. 다 같이 근데 이거 말할 수 있는 건 아니지? 시험 받는다고? 시험이? 어, 산업안전기장비 어, 시험 받는다고? 아, 그거 그냥 그거만 바꿨는데 그냥 서비스 이름을 지금 AX에 유용할까? 그런 시험 기간이 없어서 일단 이거 이게 좋다고 다 이렇게 빨리 아, 시험 기간이 없어 좀 시간이 왔을까? 이번 시험 기간이 없어서 지금 아마 AX에 AX 연결을 이 없는 것도antwort일텐데 고백때 첫 quintet 너무 보고 싶어 chant 그나마 이게 Celuv. никак 본 az 퀀 BACK 하나政전 영 침 와 잘 안가 두 컷 그렇죠 첫した 다시 væ privyeong 내 개인기에 od 벌써이 VP cocon HB 조 suggests 시작할게요. 네. 이제 점심 전까지는 저희가 실습 관련된 거는 KT 환경에서 CICT 관련된 실습은 오후부터 할 예정이고 그 전에 조금 더 오전에 아까 말씀드렸던 것들을 조금 더 딥하게 그냥 짚고 넘어가는 정도로만 이해를 할 거예요. 그래서 아까 오전에도 좀 쉬운 내용이었지만 지금은 그냥 전반적인 구성도랑 가이드 같이 짚어보면서 여러분들이 KT 안에서 개발하는 데 차질이 없도록 한 번 더 이해를 도와드리겠습니다 지금 보고 계시는 이 구성도가 한 번 보여드렸었나요? 어쨌든 전체적으로 KT 안에서 구성된 애저 환경이라고 생각하시면 되고 이 아래에 있는 서비스 워크로드 부분은 굉장히 많이 간략화되어 있어요. 그래서 하나가 구독이기 때문에 구독이 서비스 팀마다 생긴다고 생각하시면 이 아래에 쭈루룩 이어지겠죠. 어쨌든 이게 대표적인 구성도이고 첫 번째로 예전 환경을 쓰기 위한 도입 시점부터 보자면 여러분들의 라이센스가 확보되었다는 가정 하에 여러분들은 KT 사용자이기 때문에 사내 PC 또는 개발 PC로 진입을 하게 됩니다. 기타 멘터프라이즈에. 이때 개발 PC의 경우에는 사회망에 연결이 되기 때문에 사내 IP를 동적으로 활성화해주는 솔루션인 PVPN 또는 ZTNA라는 것을 쓰셔야 돼요. 그러면 이렇게 사내망 게이트웨이를 타고 들어와서 Azure의 엔터 아이디 인증을 하게 되는데요. 그때 여러분들의 회사 이메일로 인증을 해서 이 사람이 KT 임직원이구나를 이해하게 되고 그 다음에 인바운드 요청을 통해서 GitHub 엔터파이즈에 접속을 하게 되는 거죠. 아까 제가 보여드렸던 그런 거. 접속을 들어와서 GitHub 엔터파이즈에서 여러 가지 활동을 하고 로컬 PC에 있는 소스 코드를 업로드하는 과정도 동일해요. 그래서 업로드하기 위해서도 만약에 맥에서 업로드하겠다 하면 ZTNA나 PBPEN 이런 거 다 연동이 되어 있어야 되고요. 기본적으로 그리고 이제 PAT 기반, 그러니까 퍼스널 SS token을 기반으로 인증을 합니다. 그래서 코드를 푸시하게 되고 이때 푸시를 소스 코드도 푸시하지만 이제 워크플로우로 돌아갈 파이프라인도 업로드할 거잖아요. 그때 업로드한 파이프라인은 이 GitHub 액션에서 보게 되는데 GitHub 액션의 서비스는 GitHub의 SaaS에 종속된 서비스이지만 이거를 실질적으로 동작하는 이 서버들은 저희 Azure Shared Infra라는 점선 아래가 KT 내부거든요. KT 내부에 있는 이 셀프... 그냥 공중망, 그러니까 퍼블리움망에서 빌드를 하면 개발 맥에서 뭐, 뭐가 있을까? Waven 빌드, Gradle 빌드, NPM 런 빌드 이런 거 했어요. 그러면 거기에 필요한 여러 가지 Dependency들이 있잖아요. 예를 들어, maven이면은 뭐 font.xml같은 dependency 선언서 그다음에 grade는 build.grade, python은 requirement.text 뭐 이런 거 있고, npm은 package.json 뭐 이런 거 있잖아요 거기에 이제 명시된 라이브러리들을 저희는 바로 공중말을 타고 나가지 않기 때문에 이 proxy repository를 쓰고 있습니다 이 proxy repository는 여러분, 넥서스 레포지토리라는 오픈소스를 혹시 아시나요? 넥서스 레포지토리라는 오픈소스는 이 위에 보이는 구름 같은 게 퍼블링망이거든요 왜냐하면 이 정선 윗부분은 전부 다 공중망이에요 공중망에 있는 레포지토리들을 타고 이 프로시 형태로 해서 러더에서 만약에 빌드 요청을 하면은 그냥 개발 명의에서 빌드를 하면은 그냥 거기에 바로 다이렉트로 이제 선언된 레포지토리들을 찔러서 오거든요 예를 들어 자바의 스프링 포트 라이브러리가 필요하다 그러면 그냥 메이븐 레포스토리 같은 데 들어가서 찔러오는데 저희는 사내 구조로 되어 있기 때문에 어쨌든 외부에 나가려면 요청하는 라이브러리들을 밖에서 당겨와야 돼요. 그런데 러너에서 직접 찌르는 게 아니라 이 프로시트 레포스토리를 통해서 라이브러리를 가져온다. 가져올 때 이게 어떤 서비스냐면 지금 보고 계시는 이 서비스는 사용자한테 오픈된 서비스는 아니고요. 러너 서버가 그 요청을 처리하는 데 필요한 서비스고 관리는 저희 팀에서 하고 있어요 그래서 여기에 보이는 여러 가지 레포지토리 단위들이 외부의 공중망과 연결될 것들이에요 그래서 잠깐 회사로 보여드리면 좀 그러니까 texto Pad sc Auto 저희는 다 난수로 관리하고 있거든요 그래서 조금 걸릴 것 같은데 아 네 이제 들어왔죠 이 서비스에 로그인을 해서 어떤 식으로 레포스토리가 연동이 되어 있는지만 이해를 하시면 될 것 같아요 그래서 예를 들어 여러분 제일 좀 편한 게 뭐가 있을까 파이썬인가요? 파이썬 자바요? 자바가 편해요? 외부 레포스토리를 찌르는 메이븐 센트럴이라는 애가 있어요 센트럴에 대한 외부에 있는 라이브러리들을 얘가 캐싱을 해 둔 거거든요 그러니까 정확히는 러너서버가 예를 들어, 커먼 이런 게 있어요 이런 라이브러리가 있어 그러면 러너서버가 한 번은 이 Dependency를 쓰는 프로젝트의 워크플로우에 의해서 외부를 찔렀다가 가져온거에요. 이렇게 한번 캐싱을 해두면은 동일한 라이브러리와 버전을 요청할 때 매번 공중망을 탈 필요가 없겠죠 그러니까 얘가 중간에서 그 역할을 해서 이게 좀 빌드 속도와도 계속 이런 관련이 있고 어쨌든 캐싱을 해두는 그런 기능도 있고 그러면은 이 maven-central은 어디에 연동되어 있느냐 메이븐 센트럴이라는 설정에 들어가 보면 이 rep41.maven.org.maven2라는 곳이랑 연결이 되어 있습니다 얘를 직접 들어가 보면 이런 식으로 라이브러리들을 관리하는 곳이 있거든요 그럼 얘는 공중망이고 얘는 이거를 proxy해주는 역할을 넥서스가 하는 거예요 그 이유는 러너가 직접 공중망을 찌르지 않도록 하기 위함이고 또 이런 여러 라이브러리들을 빌드 캐시해놔서 빌드 속도에도 좀 개선이 되도록 구성을 해놨다 근데 지금 보이시는 이 웹뷰는 사용자들한테 공개는 안 되어 있는 거고 그냥 서버 내부적으로 이쪽 요청하는 그런 프로시 설정이 되어 있다고 생각하시면 될 것 같아요. 어쨌든 그렇게 해서 의존성을 해결을 하고 그 다음에 만약에 방금 얘기한 거는 자료나 와라처럼 정적 파일 만들 때도 중요하지만 컨테이너 이미지로 이걸 만들겠다 하면 아까 말씀드린 베이스 이미지들에 대한 관리가 필요하죠. 그러니까 이런 PVP나 ZTNA처럼 이런 사내 IP를 받은 다음에 아까 말씀드린 KT Quarantine이라는 ACR에다가 본인의 베이스 이미지를 올리셔야 돼요. 베이스 이미지를 올리시면 아까 이렇게처럼 쓸 수 있겠죠. 베이스 이미지를 이렇게 이런 식으로 해서 도커 빌드를 할 때 만약에 잡아다 add라고 이런 거 있죠 add 뭐 뭐가 있을까 대충 이렇게 해서 패스 잡아준 다음에 이거를 빌드를 해주게 되면 컨테이너 이미지가 되겠죠 컨테이너 이미지를 방금처럼 도커 파일로 만든 컨테이너 이미지는 배포를 할 이미지잖아요 배포를 할 이미지는 이 러너에서 서비스 구동마다 저장된 저장소들 acr 이라든가 아니면 이런 블록 스토리지에다가 방화벽 신청을 직접 하신 다음에 푸쉬를 하시면 여기다가 업로드가 되는거에요 거기에 대한 전반적인 업로드하는 자동화는 손으로 하는게 아니라 github self-hosted runner의 스크립트로 구성이 되어 있다 구성을 한다 까지 이제 전체적인 crcd 구조도 입니다 그래서 좀 주요하게 기억을 하셔야 될 거는 진입을 ZTNA로 하고 엔트라 인증 통해서 SASS를 쓰는데 이걸 직접적으로 여러 요청을 처리하는 건 사내망에 구성되어 있고 외부랑도 연동이 되어 있어서 라이브러리들을 해소할 수 있구나 까지 이고요 그 다음에 배포 환경을 통해서 배포 환경마다 배포 툴에 따라서 배포하게 되는데 GitOps의 경우에는 lrgocd를 쓴다 하면은 이 git hub 밖으로 나가는 아까 그 git hub proxy 일정까지 보여드렸죠 이 proxy 쪽으로 방알법 설정을 해서 git host를 구현을 해야 되는구나 까지만 이해를 하시면 ci, cd가 전부 이제 구조를 이해하셨다고 보면 될 것 같아요 그러면은 이런 구조도를 이해하고서 이 ci, cd flow는 아까 보여드렸죠 그럼 이제 전체적으로 이제 GitHub에 대한 얘기를 조금 더 할 거예요 그러니까 이거를 GitHub 다 기능적으로는 아실 수 있는데 그냥 회사에서 이런 정책을 이해를 하셔야 소스코드 개발에 좀 허들이 안 되기 때문에 이런 걸 잘 이해하신 다음에 팀에 가셔서 사용방법을 알려주셔도 되고 이런 개발 환경 개선도 최근에 이제 중요한 키포인트거든요 그래서 처음부터 잘 잡고 가겠습니다 GitHub 접속 환경은 내부망에서는 이런 LG그램에서 다 가능하고요 외부망이나 대부망, 사내에 구축된 개발 전용 와이파이 존 이런 게 있는데요 대부 KT 이런 거 거기서는 개발 맥으로 접속은 가능하지만 PVPN이나 ZTNA로 연결한 다음에 접속이 가능하다 그다음에 GitHub 인증을 할 때는 웹 접속은 이메일과 패스워드 엔터 아이디로 인증을 하게 되고요 그 다음에 터미널에서 직접 소스코드 올려야 되잖아요 그때는 퍼스널SS 토큰, PAD 이라는 걸로 인증을 하게 되고 그때 이 토큰의 최대 기간은 90일로 저희가 지정을 해놨습니다 90일 이후에는 다시 재발급을 받아서 쓰셔야 돼요 그 다음에 기톱 엔터파이즈 관리 측에는 넘어가고 기톱 말씀드렸고, 이제 브랜치 전략이 있어요 저희는 우선 브랜치 전략을 강제하지는 않습니다 팀마다 문화가 좀 다르고 기존에 쓰고 있던 브랜치 전략이 다 다를 거예요 근데 기본으로는 GitFlow를 기본 브랜치 전략으로 표준화는 해놨고요 GitFlow의 기본 브랜치 전략은 인터넷에 많이 나오겠지만 어쨌든 메인, 데브, 피처 브랜치 따가지고 주요한 메인 브랜치에다가 매번 소스코드 업로드하는 것은 잘 하지 않고 스프링트 때마다 데브 브랜치를 따가지고 거기에 기능, 즉 피처마다 개발해서 소스코드 병합을 하겠죠 그래서 이 피처 개발이 끝나면 데브에 PR 날려서 소스코드 검토받고 데브에 기능이 추가되는 게 기플로우의 전략입니다 그래서 이때마다 어쨌든 이런 표준적으로는 기플로우를 기본 브랜치 전략으로 표준화해놨다 그 다음에 브랜치 보안 정책으로서는 이제 여러분들이 이거는 약간 다른 게 그냥 퍼블릭 기탑에서 액션 돌리면 잘 돌아가잖아요. 이 소스코드가 보안적으로 유해하다 해야 되나 문제가 있는지 이런 검토 안 하고 넘어가는데 저희는 코드QL이라는 서비스가 있어요. 그래서 기탑 내부적인 설정 값으로 기탑 어드밴스드 시큐리티라는 라이센스를 사서 이 소스코드에 대해서 적합한지 문제 없는지 이런 소스코드 정적 분석을 하는 거예요. 이게 코드QL이라는 툴을 넣어놨고 간단하게 그냥 데모는 아니고 보여드리자면 이런 코드QL이 돌게 되면 예를 들어 이 서비스 안에 이 소스코드 안에 어떤 문제가 있는지 정적으로 잡아주는 거예요. 예를 들어 유저네임이 문제야. 유저네임이 하드코드 되어 있어. 이런 식의 피드백을 주고 여기 패스워드에도 그냥 시크릿 이렇게 넣어놨죠. 데모 형식이지만 어쨌든 소스코드에 이렇게 정적으로 데이터 값을 박아놓는 거는 위험하죠. 당연히 위험하기 때문에 이런 정적 코드출이 돌아가게 되는데 그 돌아가는 브랜치가 메인 브랜치와 데브 브랜치에서 돌아요. 그러니까 데브 브랜치에 소스코드가 푸시되거나 메인 브랜치에 PR 날아와서 소스코드가 어쨌든 푸시든 PR이든 소스코드가 업로드 되는 커밋되는 그런 액션이 취해졌을 때 이 코드 QL이라는 프로세스가 돌게 됩니다. 그리고 이런 피드백을 액션에서 볼 수 있죠. 그런 식이고 거기까지 이제 좀 참고를 하시면은 소스코드 관리해도 좋을 것 같고 그 다음에 이제 GitHub 사용자 입장에서 소스코드를 쓰기 위해서 GitHub을 써야 되잖아요. 근데 저희가 이제 오늘은 교육용으로 저희가 라이센스를 따로 받았어요. 그러니까 BPM 플러스를 통해서 받으실 수 있는데 원래는 이제 신청 목적에 사용하는 Azure 구독이 하나씩 있어야 GitHub을 쓸 수 있습니다. 애저 구독은 간단하게 보여드리면 그냥 서비스 팀마다 발급 받은 구독을 뜻해요 구독이라고 하면은 뭐 이런 거 있죠 만약에 DevOps 팀이야 DevOps 팀이 받은 구독은 두 개가 있네요 이런 식으로 이 구독명이 있어야 사실 GitHub을 쓸 수 있거든요 여러분들은 그냥 이제 교육용이니까 여러분들의 라이센스 발급을 위해서 구독 없이 그냥 받았고 그때 이제 신청 명의에 이제 그냥 뭐 클테코 3기 교육을 위한 뭐 이런거 썼잖아요 그래서 그 다음에 이제 오리지에이션 생성 신청도 직접 하셔야 됩니다 그러니까 오리지에이션이라는 단위는 그 이게 지금 오리지에이션이고 이게 여러분이에요 그러니까 이 KT 클라우드 AX 테크라는 오리지에이션의 교육용 오리지에이션이고 이 오리지에이션을 만들기 위한 신청 절차가 필요하거든요 거기에 대한 생성 주체는 이제 저희 팀이 하고 있고 이런 가이드 통해서 우거니제이션을 신청하시면 됩니다 우거니제이션 신청할 때도 bpm플러스로 신청을 하셨겠죠 그러니까 github 사용 이전에 애적불도 발급이 되었는지 bpm 신청을 했는지 확인 후 신청 바랍니다 라는 거 후에 이제 양식 채워가지고 우거니제이션 생성하시면 우거니제이션마다 kt 담당자 한 분씩 지정을 해 드려요 kt 담당자가 우거니제이션을 관리하는 거예요 오버니제이션을 관리하는 이유는 그 안에 만약에 협력사분이 들어왔다 아니면 새로운 개발 인력 추가가 필요하다 어쨌든 그 오버니제이션 전체에 대한 관리 포인트를 KT 담당자 오너 한 분이 오너관을 갖고서 관리를 하는 거죠 그래서 GitHub 오버니제이션 신청 절차가 필요하고 그 다음에 디폴트 브랜치를 메인으로 설정하고 이제 그런 전체적인 브랜치 전략은 아까 말씀드린 것처럼 팀 내부 문화에 따라서 Dflow를 베이스로 하되 팀마다의 기준이 있다면 쓰시면 되고 그 다음에 GitHub 접근 및 업로드는 이런 식의 가이드가 있는데 이것도 좀 중요한 게 대부분 정책적인 얘기라서 좀 지루할 수 있겠지만 중요한 겁니다 그래서 GitHub 페이지 접근을 허용을 위한 사전 신청 라고 해서 첫 번째로는 저희가 소스 코드를 업로드할 때 이제 GitHub에서 받을 수 있는 소스코드의 양에 제한이 있어요 그러니까 저희가 SaaS 서비스를 쓰지만 GitHub에다가 올릴 수 있는 전체 GitHub에다가 마구잡이를 올리면은 그 스토리지에 대한 빌링 정책이 작동을 해서 많이 쓰면은 많이 쓰는 만큼 이제 비용이 많이 나가게 되거든요 그래서 현재는 DLP라는 거에서 이제 단일 파일 크기가 1MB를 넘어갈 때 업로드가 막히게 된다 따라서 DLP와 BPM 신청을 함께 해주셔야 DLP BPM과 FortiFroxy라는 신청 가이드를 통해서 이걸 해제하는 절차가 좀 필요합니다 그래서 이건 사전적으로 좀 예외가 필요한 거고 이런 식으로 뭐 어쨌든 소스코드 좀 크기가 큰 소스코드 업로드를 위해서는 DLP와 FortiFroxy 예외 요청이 필요하다 까지만 그냥 기억을 해주시면 될 것 같고 그 다음에 이 GitHub 멤버 추가를 위한 라이선스 등록 신청은 이제 GitHub KT 오너 분이 만약에 여러분이 될 수도 있겠죠 그 오버니제이션의 오너가 이번에 협력사 한 분이 추가됐어 아니면 개발 인력 한 명이 프로젝트에 들어오게 됐어 했을 때 라이선스 발급이 필요해요 그때 여러분들이 신청했던 것처럼 BPM 플러스 통해서 이제 이런 라이선스를 발급 받은 다음에 직접 KT 오너 분이 팀에 추가하는, 오버니제이션에 추가하는 그런 식의 절차로 오버니제이션을 꾸리게 됩니다 그래서 제가 여러분들의 라이센스를 잠깐 봤는데 한 9분 정도가 지금 추가가 안 돼요 그게 누구냐면 뭐라는 건 아니고 확인이 필요해서 첫 번째로 이동준님, 구경환님은 여기 안 계시고 권유진님, 최지윤님, 이동형님, 정승철님, 이진호님, 김재형님, 최우형님 해서 하나 둘 셋 넷 다섯 여섯 일곱 여덟 아홉 이거 혹시 지금 제가 잠깐 볼 건데 bpm 플러스 한번 들어가보실래요? 지금 팀장님이 오신 거 맞죠? 네, 저 혼자 봐가지고 네, 감사합니다. 들어가 봐요.. 이렇게 하잖아요 네 저희는 엔진 안내도还有 이 장면에서 크게 하지 말고 바로 헤 переп objet가 될 수 있겠네요 이 장면에 원래 each 당사자 승인 팁이 있어요 써있어. 그렇게 다 하셨으면 제가 다 하도록 하겠습니다. 우선 자리... 네. 그래요? 그러면은... 네. 팀장님 승인까지만 된 거예요? 네. 제가 한번 여쭤볼게요. Anchor завią teve Netflix에 하고 있다는 의미를 잊 Popeyeitä ve wied Twitter에 앞으로 보면서 많은 영향을 받았다고 medicinal saturim korea Emirler i quiere escuchar te 됐습니다. 됐어요? 혹시 문제 없으세요? 네, 문제 없습니다.짠 지압이 Paso 깡을 했다가숨이orn 저 원까지 유지하고 있었어요 1.5kg에 덜 온 Н 0. próstube에 들어간 무대에 아 어차피 already find 일본 doncINAочка évidemment고요 아 이 순서대로 presenters하시imentos headed to the live stream What do you think about CD sales télék이 Bravo delivering?歲 아, 이거 막.. 그럼 이제.. 아니, 아니, 진짜.. 내가 말이야.. 뭐, 뭐.. 또 뭐 잘 하시는 거 있어요? 아, 이거 안 보여? 아, 네. 잘 읽은 거 있어요. 지금 말하려면 이렇게.. 여러 번 막고 간 쪽으로.. 이거 썼어요? 이거 때문에.. 이거 원래 떠요. 이거 로그인.. 말씀드려야지.. 지금 시즌이 끝났어요. 지금 막.. 뭐 안 된다고 안 된다고 그래서.. 사실은.. 아.. 원래 그냥 시즌이 되는 거 같아요. 지금.. 그래서 그 의심 차이는 아시아에서 못 하는 것 같은데요. 비커보다 지금.. 지금.. 더 불안해서.. 아.. 응. 응. 아.. 응. 내가 할 수 있는 건가? 형이 멀지 않아요. 그럼요. 나도 안 될 거 같긴 한데. 아니야. 그래? 그러면 지금 너... 너무 멀어. 내가 할 수 있는 건가? 너무 멀어. 페르차울라인에 출연을 했으면 좋겠다. 지금이 아니라 지금이 아니라. 그냥 그냥 지금이 아니고. 지금이 없다. 좋았다. 지금. 나는 알겠어. 내가 할 수 있는 건가? 내가 할 수 있는 건가? 내가 할 수 있는 건가? 우리 아 내가 한번 읽어보시고 싶어하는 거. 어떻게 알아요? 내가 한번 읽어보실래요? 내가 한번 읽어보실래요? 내가 이거 두어 번 읽을 수 있어. 지금 그 옵스 본 부분들이 라이센스 프로비저닝이 안 되는 것 같은데 이거 읽어볼게요. 이거 읽어볼게요.겠습니다 of 아 ldg soccer 이거 바로 그 선택 Mini'e 고 흥분간 알고있어 보여준 지역 Fine 그거iten 빨라 깨끗하게 보 automatic 잡아와 Innen 안되어 쳐다봐 빼앗 peeled depriverCongrats 이건 какой야 기절하지 마 우선은 저희가 이제 GitHub을 쓰기 위해서는 라이센스가 먼저 있어야 돼요. 그래서 없어온 분들 라이센스 프로비젼이 돼야 돼가지고 그 전에 제가 이제 Slack에다가 링크 하나 드렸거든요. 이게 전체적인 Azure CI, CD 가이드 파일입니다 가이드 파일 한번씩 보시고 이게 저희가 또 근데 Ops 본부 분들 부서장 승인이 안 났다고 하셨는데 이거 제가 한번 올라가서 확인을 해 볼게요 어쨌든 그럼 여러분들은 지금 이 가이드 다 접속 되시나요? 가이드는? 가이드 보시면서 이게 좀 여러분의 피드백이 필요한 게 이게 좀 KT 환경에서 이런 CI,CD 가이드를 이해하는 게 어려운가에 대한 것도 주요 포인트거든요. 그러니까 저희가 최근에 이제 저희 본부도 그렇고 그냥 기술 혁신 부문 전체에서 개발 환경을 개선하는 게 좀 필요해요. 근데 이 가이드 전체적으로 구조라든가 아니면은 어떤 특정 페이지에서 이 내용을 이해하기 어렵다 만약에 뭐 이런 부분이 있으시면은 저한테 그냥 편한 방법으로 DM이든 그냥 어쨌든 편한 방법으로 이 페이지 링크랑 어느 부분이 어렵다 이 정도만 좀 피드백을 주시면은 좋을 것 같아요 이거는 이제 과제는 아니고 잠깐 시간을 버려야 되니까 말씀드리는 거고 제가 잠깐 올라갔다 올 건데 너무 크게 떠들지 마시고 제가 금방 다녀오겠습니다. 없애본 부분들 것만 좀 보고 올게요. 그래서 전체적으로 가이드 한 번씩만 검토 부탁드립니다. 금방 오겠습니다. 그 부분은 배우는 게. 감사합니다. 오늘 깃업 다 해야 되는데 그러면은 여러분들 그동안 과제 하면서 소스코드 쪽에서 개발을 어떤 거를 얼마나 해봤어요? 그동안 과제가 직접 소스코드를 짜는 과제가 있었나요? 자바다 하면 자바 소스코드 짜고 백엔드 짜고 이런 거 있었어요. 소스 코드들 지금 다 어디에 저장하고 있어요? 개인 PC에 있나요? 개인 개정 우선 그거를 우리 라이센스 확보가 되면은 제가 이제 저희가 앞으로 뭘 할 거냐면 먼저 GitHub에 접속을 해서 우리의 이 오버니제이션에 제가 한 명씩 다 추가를 해 드릴 거예요 그래서 여기 들어와 계신 분들이 라이센스가 있는 분들이고 여기에 이제 이렇게 있죠. 이분들은 라이센스 확보가 된 분들이고 여기에 이제 만약에 제가 딱 기억에 남는 게 한 분이 계셔가지고 이분이 멤버가 아니라고 뜨죠. 아직 라이센스가 없는 거거든요 그래서 근데 체스틀 팀장님이 승인 잘 해주셔가지고 저희 쪽에서 확인을 해봐야 될 것 같고 어쨌든 이 오가니제이션에 들어와서 여기에 이제 여러분들의 레포스토리를 하나씩 만들 거예요 소스코드를 만들고 거기에 여러분들이 그동안 했던 과제를 업로드 할 거거든요 그러면은 기톱에서 그러니까 여러분들의 개인 계정 기톱에서 KT 엔터프라이즈로 바로 임포트 할 수 없기 때문에 그 소스코드를 가장 최신화 된 상태로 여러분들의 로컬 PC에다가 다운로드를 받으세요 쉽게 말하자면 그냥 퍼블릭 기톱 개인 계정에서 기클론 하면 되겠죠 그래서 개인 PC에 어느 특정 디렉토리에 저장을 해 주시면 이따가 라이센스가 확보가 되면은 여기에 레포스토리 하나씩 타가지고 저희가 업로드를 해 볼 거고 이왕이면은 좀 소스코드 하나당 1메가가 넘지 않는 선으로 왜냐면 저희가 DLP 신청을 예외를 받아야 되기 때문에 그거는 좀 가벼운 소스코드를 해주시면 좋을 것 같고 그렇게 소스코드가 업데이트가 되면은 저희가 이제 워크플로우 파일 만들어서 직접 CI 파이프라인을 KT 환경에 맞게 한번 짜보겠습니다 그래서 그렇게까지만 해주시고 우선 지금 소스코드 다운로드를 부탁드립니다. 감사합니다. 로그아웃하고 다시 개인 계정을 오메고인 하십니다. 이걸로 할 수 있을까요? 그러면 소스 코드 과제를 기술 스택이 어떻게 되요? 언어는 뭐고, 이런 간략한 정보? 아잇 선수 이거지? 자바야. 자바? 대부분은 자바야. 대부분 자바야. 아 안됐나? ... 뭐가 잘 안되세. IP, 액세스, 어플 등등iste n a abilities 맵에 한 encountered Khusus 번กagem 여자3 friend n a 한번 이제 꺼서자기 치 brass 어 삼 Q. 스프링 연습을 하면서 어떤 생각을 했을까요? Q. 스프링 연습을 하면서 어떤 생각을 했을까요? 사실 스프링을 가지고 좋은 참여를 받으면서 사람을 더 수거할 수가 없는데 시험을 쳐야 할 것 같아요 우리 팀에서 계속 했다고 매니저님은 좋았어요 왜요? 너 또 안 했어? 왜요? 저요? 또 그냥 했죠 네, 너무 좋았어요 엄청 잘하셨고 14장에서 자가격리가 되었 ör젠棒 Sun verses xiào zhāngmíng 제목도 되긴 했는데 João thomas 서비스 다 띄울 필요가 없죠. 백핸드 deflao를終 rigidos는 상ary입니다. 그리고 3workery 까지 400 veramente 열심히 하려고 잘해가지고 또 내 생각에도 문제가 kasih 그건 그렇게 안돼 근데 내가 900만 및 shattered 인거 알아? 응 우리가 나 nhưng 되까 때리지만 해도 돼 OOO warmth는 뭐냐 다 stream 카운луч 난 19만이 ubernetes 무슨 소동 cidade Garfieldgilarring 회사은 우선 이가 두고 자신들이 신뢰하 porter最後는 assess는 tour 타워 다른 과정 2 4 너는 찡해 Oppenso. 와우 국경 3, жив해서 원래 부친 whereas a 투 Further 더 인해서에미션 3lk 메세지 4k Q. 소스코드 업데이트 되셨나요? 아 뭐 기풀, 기클론 하셨을까? Q. 소스코드 업데이트 되셨나요? Q. 소스코드 업데이트 되셨나요? CI만 돼있다는 테스트용으로 될까? 배포할 형상이 뭐예요? 기능이? 아르보시디로 띄우려는 게 지금 얘기한 거잖아요. 우리가 빌드에서 배포해야 되니까. 그러면 그게 동작하는 게 뭐예요? 예를 들어... 제가 코드를 한번 봐볼게요. 이게 사실 지금 그동안 여러분들이 했던 코드로 말씀드리는 이유는 자, 잠시 말씀드릴게요. 지금 이거를 본인의 소스코드를 하는 이유는 그동안 했던 과제를 KT 환경에서 배포하기 위한 거고요. 제가 데모 프로젝트를 드릴 순 있는데 이게 본인의 서비스를 가장 잘 이해하는 사람이 몇 가지 하는 게 이해도가 높기 때문에 이렇게 말씀드린 거고 지금은 그냥 아까 말씀 주신 것처럼 진짜 그냥 플라스크로 5,000원 코트에 리턴하는 정도만 해도 상관없어요 사실 상관은 없거든요 그렇게 되고 지금 그 라이센스 없는 분들 빼고 그냥 레포스토리 생성까지만 해볼게요 이게 어려운 건 아니니까 이따가 따라잡는데 문제 없으실 것 같고 지금 드리는 이 오버니제이션에다가 접속을 한번 해 보세요 누가 벌써 만들었네? 오늘 절고가 됐습니다 누구야? 오정민님 잘하셨습니다 이렇게 만드시면 되는데 테스트는 서로 구분하기 좀 어렵고 제가 네이밍을 정해드릴게요 이 레포는 제가 삭제하겠습니다 감사합니다 자 이 레포스토리에 하나씩 만들 건데 뭐를 만드는 게 이름을 일단 제 거를 오늘 뭐야 여러분이 클테코 삼기죠 ctc 할까요? ctc 응삼하고 본인 뭐 이니셜 하셔도 되고 저라면은 그냥 자주 쓰는 이런 거 하겠습니다 이게 제 거고 이런 식으로 만드시되 이제 프라이빗으로 꼭 만들어 주셔야 돼요 저희가 기본 정책으로 이제 레포스토리의 공개 권한을 인터널이 아니라 프라이빗으로 정책을 관리하고 있어요 왜냐면은 이제 프로젝트 팀마다 하나의 SaaS 서비스에 접속해서 쓰게 되는데 소스 코드들을 서로 열람하지 않기 위함이고 기본적으로 프라이빗이 되어 있는데 인터넷 설정으로 저희 엔터프레즈 멤버라면 볼 수는 있습니다 볼 수는 있고 이거는 내부적으로 레포스토리 설정을 해주시면 되고요 저는 오너가나 있기 때문에 다 들어가 볼 수 있는 거고 여러분들은 이제 각자 설정을 해주시고 리드미 파일이 필요하시면 만드신 다음에 소스 코드 업로드 다시 여기서 풀 받아서 git init 한 다음에 업로드 하셔도 되고 그게 아니면 그냥 빈 레포스토리 만들어서 바로 여기 레포스토리 연동해서 업로드 하셔도 돼요 편하게 하시고 저는 워크플로우 파일을 github에서 만들 거기 때문에 편안하게 readme 파일을 추가해서 만들겠습니다 아래 gitignore 같은 경우에는 안 하는 걸로 할게요 안 하고 라이센스 이런 것도 안 하는 걸로 하겠습니다 다 이제 아무것도 없는 생자에서 이름만 넣고 공유해드려야지 넣어주시고 레포를 만드셔서 Create a 레포스토리를 하시는 것까지 해볼게요 라이센스 있으신 분들과 먼저 진행해 주시고 없으신 분들은 라이센스 확보하고서 바로 이 단계까지 가볼게요 어려운 거 아니니까 감사합니다. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. Yin r disclosure 난 내 꿈을告제 몇 분 kablang 이러지title Deoco 닫고 Physics cor D P Hydro B Interior Fin Visual Visual 수고하셨습니다. 아직 라이센스 있으신 한 분이 레포를 안 만들어 주신 것 같은데 맞나요? 다 생겼네요. 라이센스 있으신 분들은 다 만드셨고 여기다가 여러분들의 소스코드를 올릴 거예요 소스코드를 올리는데 기존 지금 저희가 아까 git pool이나 git clone으로 받았으니까 그게 본인의 개인 github이랑 연동이 될 수 있을 거란 말이죠 그러면 git init으로 초기화를 먼저 해 주시고 그 다음에 저희 여기다가 올릴 건데 이 레포트 스토리에다가 여러분들 다 많이 해 보셨으니까 그냥 구두로 편하게 말씀드릴게요 Git 클론 할 때 쓰는 HTTP 인증 있죠? 다들 ZTNA 다시 키시고 요거를 이제 그냥 해서 복사해서 Git init 한 다음에 Origin master, Origin main이죠 Origin main으로 연결하고 레포트 스토리를 그 다음에 업로드를 하시면 돼요 하시면 되는데 저희는 인증이 필요하기 때문에 다들 라이센스 있으신 분들 먼저 여기 오른쪽에 프로필 있습니다 이거 동그란 거, 키보드를 눌러서 settings 에 가서 본인의 퍼스널 SS 토큰을 발행을 할 건데 여기 이제 내 퍼스널 어카운트 들어왔을 때 아래쪽에 이제 이 Developer Settings라고 있어요 맨 아래 Developer Settings 아래에 이 P-AT 줄여서, 아니 퍼스널 SS 토큰 줄여서 P-AT가 있죠 그래서 저희는 클래식 토큰을 하나 만들겠습니다 거기에 여러가지가 있죠 여러가지가 있는데 이제 그냥 새롭게 뉴토큰을 하나 만들게요 뉴토큰 만들고 거기에 그냥 편하게 알아볼 수 있는 걸로 최대 90일까지 설정 가능한데 저희는 뭐 데모니까 일주일 뭐 이런거 해도 되고 어쨌든 여기 써있죠 저희가 K-Enterprise의 최대 90일까지 펫 활성화가 가능하다 뭐 이런 게 써있고 그 아래에 이제 스코프를 정해줘야 되는데 먼저 저희가 Private Repo Story에 대해서 접근할 거기 때문에 레포 설정 해주시고 워크플로우 쓸 거죠. 워크플로우 쓰고 그 다음에 Delete는 할 필요 없을 것 같고요 이 두 개만 활성화 하시면 될 것 같아요 이 레포랑 워크플로우에 대한 권한 이렇게 두 개 활성화해서 토큰을 만들겠습니다 저는 이제 토큰 값이 노출이 되었는데 저는 어차피 안 쓸 거라서 이제 참고만 하시면 되고 이 토큰을 그냥 복사해서 어디 저장해 주시고 외부장이라든가 그 다음에 이제 github push 할 때 이쪽으로 인증을 하라는 터미널에서 아웃풋이 나올 거예요 거기 이제 유저 네임으로 여러분들의 이 이름 있죠 프로필 눌렀을 때 이 이름 underbarktdev가 붙은 이름을 써 주시면 되고요 그 다음에 이제 패스워드에다가 토큰값 넣어 주시면 인증이 잘 된다면 또 안 될 수도 있긴 한데 인증이 잘 된다면 이제 소스코드가 업로드가 될 거예요 거기까지 한번 해 보고 또 문제 있으시면 말씀 부탁드립니다 그리고 그 라이센스 없으신 분들은 있으신 분들은 그 죄송하지만 bpm 플러스를 다시 한번 신청 그래서 지금 있으신 분들은 그냥 이거 토큰으로 한번 달아보시고 라이선스 없으신 분들은 제가 한번 보여드릴게요 이 bpm 플러스를 들어가서 여기에 이제 왼쪽에 업무 시작 있어요 뭐 해보셨지만 업무 시작에 클라우드 라이선스 신청 누르고 선택으로 이 아래에 github 있죠 포파일러스는 깁텀이 나와야 생기는 거라서 깁텀 먼저 하고 Q103기 뭐였을까요? 마이센스 재신청, 재신청으로 할게요 다시 하시는 분들은 재신청을 하고 동의 동의하고 누르시면 여기 왼쪽에 이제 신청있죠 신청 누르시면은 부서장 승인으로 넘어갈게요 여기 팀장님 계신데 팀장 선으로 넘어가서 팀장님이 승인해 주시면 저희 쪽에서 다시 받을 수 있는지 확인을 해 볼게요 그러니까 라이센스 없으신 분들은 죄송하지만 다시 이거 BPM 들어가셔서 지금 다시... 감사합니다. 감사합니다. 또 anunci martyr 있다가ỉ오 핑크 인 나 exists ㅎㅎㅎㅎㅎㅎㅎер이 nutrient 사랑 하고 티밍 통해ält 아 베니 감사합니다. 한글 자 revisit 프로필을 כ WanSys 있으면 What's in it 이런 식으로 그 흙 끝내면서 제이uth 로그인도 다시 네 트렌드에 캔標기가 있어요 응? 파일을 Matrix células의 eventually 네 맞아요 이 Про 필료 자체에는 대장가 gars 이름을 할 수 있어 ping alex 이름으로 박스크ender um 감사합니다. 생각보다 그 지인이 좀.. 그.. 스님은.. 그.. 그 팀장님이 상을 해주셔야.. 팀장님이.. 네, 저.. 아, 그것도요? 어.. 아.. 네, 또.. 네, 또.. 네, 또.. 네, 또.. 네, 또.. 네, 또.. 네, 또.. 네, 또.. 양동기 팀장님 맞으시죠? 네, 네. 네, 네. 네, 네. 선생님께서 slit tinha various and prepared a process . 한번 자 citrus charges 문자를 드리겠습니다 leahaBACK 박 Malcolm anh Army along com 감사합니다. 이 영상은 한국국토정보공사의 자료입니다. 그는 그의 성을 지켜보는 것이다. 그는 그의 성을 지켜보는 것이다. после 성과, 성적, 행위도 똑같고... 여기 뭐야? 금노무구 신ㅡано 금노무구는 보기만 해도 templates를irm Q. 랩퍼가 있는지? Q. 랩퍼가 있는지? 랩퍼 좀 봐도 돼요? 올려주시면 돼요 Q. 랩퍼가 있는지? 이거 과제로 하신 거구나. 이번에 과제로 하신 거예요? 됐어요? 네 됐습니다 혹시 이거 하면서 어려운 거 있나요? 혹시? 그거 잘 안 되세요? 403이면 권한이 없으신 거고 그 토큰에다가 권한 조회하고 다시 한번 해보실래요? 아 그래요? 이 영상은 한국어 자막을 사용하였습니다. 민 셰프, 세 번째 멤버까지. 물과 질투, 관광도 junt. 아닙니다.å 귀 Asian bạn이аг무제는 좀하시는거고, 김이랑 통화를 못한 건가? 어때요? 깜짝 놀랄게 대답해서 Q. 한국인의 인기성은? Q. 한국인의 인기성은? Q. 한국인의 인기성은? 아 그래서 안 됐어요? 이거 실수하는 거 안 된다고요? 뭐 하지 말고 내는 아닌 건 없대요 저희도 저 일찍 못 했거든요 또 안 되시는 거 무슨 문제 있어요? 네 저 이게 무시하면은 좀 리젝팅이 되는데 네 아 이거 안에 로그인 하고 싶을 수 있는 리젠트에다가 리젠트 받아서 지금 로그 DM으로 보내주시면 또 뭐 잘 안되시는 분 있으신가요? 알겠습니다 아 됐어요? 어떻게 됐어요? 아 감사합니다. 네.нее 천천히 공부하자. Mmmm 그랙이 음.. Spring 게이 teach 소 drawers in one piece! kindly spelling quatre pesar iKON bench 오늘은 매우 Refflash jisoo의 值 teve 혹시 이름이 어떻게 되세요? 네 알겠습니다 이거? 네 승인이 나서 포파일럿은 오늘 할 건 아니라서 네 아 그거 예스 거예요 혹시 또 문제 있으신 분 있나요? 편하게 없나요? 저의... 도전 행위랑 수정을 알려드린 것 같은데 배급 받은 걸로 있냐? 네, 그게 있습니다 저거 아는 민원 씨거든요 민원 씨 그거를... 디바이스로 인스타그램으로 하니까 이 문제를 하니까 대단하다 네, 그런 점이 있어요 그런 점이 있어서 이렇게 이렇게 생활적인 인생에서 알까? 이게 조금 어려울 것 같죠 편의점에서 무슨 일을? 편의점에서 본인이 다 먹어요 일주일에 먹어요 내가 하는 건 없는데 지금 내가 하는 건 뭐고 정리도 하고 있었어 아니야 초기화 한 번 할 수 있어 전전 먼저 초기화 했어야지 정리도 혹시 지워봤어? 정리도 하고 있었어 정리도 하고 있었어 내가 한 건 없었지? 근데 그건 안 올라가 오케이 정답은? 그래서 한 번 더 하고 싶어요 그래서 안 되죠 혹시 선생님이 얘기했었는데 스탠드X가 저거 굉장히 착오성도 더하고 그것도 스탠드X 유닛을 하나 더 호응을 할 수 있는 거죠 아니 주의를 하실 수가 없어서 개인적인 사고였어요 그래서 로그인 때문에 여기가 이제 로그아웃을 아 그거 아니지 저 PAT로 로그인 안 하고 GH 로그아웃하고 GH 로그인하니까 디바이스 로그인해서 아 그걸로 했어야지 아마 우선은 어느 실습이 그렇듯이 항상 한 번에 되는 경우는 잘 없거든요 민망해서 하는 얘기고 혹시 점심은 어떻게 하세요? 어디 가서 드세요? 식당 가시나요? 그러면 지금은 점심시간이니까 각자 문제가 있으시면 조금 더 해결해 보셔도 될 것 같고 라이센스 문제 있으신 분들은 팀장님 승인 하에 저희가 다시 한번 확인해 보고 오후까지는 되기를 바라고 그 다음에 인증 안 되시는 분들은 조금 더 확인을 해보셔도 될 것 같아요. 그렇게 해서 저희는 1시 10분에 시작을 하겠습니다. 1시 10분에 식사 맛있게 하시고 교육 들으시느라 고생하셨어요. 감사합니다. 이 영상은 한국국토정보공사의 자료입니다. 너무 많이 먹어서 갑자기 오빠가 보여준 줄 알았어 나 이렇게 웃으면 좋지 않아 포켓몬이 약간 더럽잖아 근데 이거 내가 생각했던 것만큼은 없었는데 이거 진짜 오빠가 되나 안 되나 제가 코드 큐 아 진짜? 아니 아 진짜? 아니 아 이거 뭐라고 했었으면 전화가 안 됐는데 뭐였지? 하 onomy 한순간에 drawer에 보니까 2 contempt 서칠 컷 태아 예림 준비됬어요 아 Sailor Moong 어? 진화야? 진화의 진화 진화의 진화 세러로.. 어제 그거하고 상처.. 그러니까 이게 그게.. 글자들 나오는데 아니 근데 기훈이 세러로 이렇게 봤어 기훈이 영상.. 미성 ją워? enfim 진짜 날 CAP met 텐션에 해LR wszystko는 다 리사 파스파리티 오늘 잘한다 아메리카 진짜 너무 재밌어 가벼워 먹어도 돼 가만히 먹을 수 있어 요즘 너무 어색해 되게 저런 맛인데 너희 어때? 너무 맛있어 뱀이가 저런 맛 저런 저런 맛 이거 해봐야겠다 저거 안 들리겠다 빨리 진짜 너무 맛있어 이거 저런 저런 맛 아 귀여워 오랜만에 온다 새로운 대란 가야겠다 재밌는데? 이번이.. 오빠 간장.. 대피? 알겠어 먹기 겁니다 한 번에 먹기 몽생 한 번에 먹기 왜 전혀 안 먹어도 되겠다 미안해 몽생 한 번에 먹기 뭐 했어? 세 개 먹은 적이 있어 이번이.. 새우수 백까지 먹은 거야 이 봉준님 BPM플러스 팀장님 승인 받으셨나요? 저는 승인 받았는데 안 됐는데요 잠시만요. 권유진 님 승인 받으셨어요? 들어갔어요? 정승철 님 승인 안 받았다고 하셨죠? 이진호 님은 저희 쪽에서 승인했다고 해서 라이센스 프로비전이 되고 있을 것 같거든요 조금 있다가 다시 한번 추가해보고 이동혁님 들어왔습니다 네 그러면 한 4분 빼고 다 된 것 같아요 라이센스가 좀 오래 걸리는데 우선은 좀 진행을 하겠습니다 그래서 현재까지는 어렵지 않으셨죠 그쵸 그쵸 저희가 오전에는 저희가 좀 정책적으로 좀 많이 말씀을 드렸고 그 다음에 라이센스 받은 상태에서 KT GitHub 들어와서 우리 오바리 데이션에 이제 멤버로 추가를 해 드렸고 제가 그리고 애플스토리를 만들었어요 그래서 소스 코드를 올리셨어요 제가 한 몇 개 좀 가보겠습니다 그럼 혹시 이거 지금 어느 분이신지 이거 레퍼 주인 분 계세요? 주인 NOI지? 이거 지금 도커파일에서 이렇게 프롬조를 두 개 쓰는 거 배우신 거예요 저희 조원한테 물어봐야 될 것 같은데 이거 혹시 만드신 분? 도커파일 짜신 분? 아 저거.. 저거는 승진할까? 아니 뭐라 하는 게 아니에요 케이스가 여러 개라서 좀 통합을 해야 될 것 같아서 여쭤보려고 이렇게 멀티스테이지 빌드로 만드신 분? 근데 아무튼 너 빌드가 없으신 거 같으면 그러면 잡아야 되지 그러면 빌더 섹터를 써서 프로젝트 빌더 빌드 이미지 된다 이거 빌드 이미지 이렇게 안 되는지 한번 더 볼게요 대부분 자바이시고 뷰도 있네 자바 자바가 있던데 애주진이 이거는 과제로 한건가요 도커 컴포즈까지는 다 배우신 거예요? 아 그거 내가 모르는 게 아니라 누가 마이크 켜서 잠시만요 경험 교육 때 프로할로 같이 한 거 네 멋있을 것 같은데 감사합니다. 이 젠03 레지스트리 04 이거는 개인 레지스트리 쓰신 건가요? 이거 JJW님 이거 혹시 샌드박스에요? 아 맞아요 감사합니다. 웃긴거구나 하나만 더 보겠습니다 그러면 라이센스는 팀장님 승인이 되는 대로 그쪽에서 이제 승인을 드리고 받을 예정이고 남은 한 네다섯 분 정도 그때까지는 그냥 우선 다 비교적 쉬운 내용이에요 여러분들이 그동안 과제했던 걸로 커버가 되는 내용인데 그래서 그냥 좀 편하게 들어주시면 될 것 같고 또 우선은 각자의 레포에 접근을 해봅시다 접근을 해봐서 들어가 보시고요 이제 소스코드를 본인의 소스코드를 올렸으니까 이 서비스, 그러니까 소스 코드의 기술 스택을 다 알고 계신다는 과정이죠 나는 이제 플라스크로 띄울 거니까 파이썬 과정 몇 필요한지 이런 거 다 알 거고 자바로 빌드할 거니까 내가 패키지 매니저로 그레이드 쓰는지 메이븐 쓰는지 다 스스로 알 거고 그 다음에 도커 파일도 작성해 두셨으니까 이거를 컨테이너화 하는데 무리 없을 것 같고요 그리고 종종 몇 분들은 k-parse에 이런 거 다 오브젝트들 만들어 주시는 걸 해두신 것 같은데 잠깐만요 그러면 우선 이 정도면은 파이프라인만 짜면은 빌드 배포를 할 수 있을 것 같아요 그러면은 KT 안에서 이거를 빌드 배포를 어떻게 하느냐에 대한 실습을 좀 진행을 해 보겠습니다 우선 방금 말씀드린 것처럼 본인의 레포트 스토리에 접근을 각자 해보시고요 이게 옆 친구랑 팀 단위로 하셨던 것 같아서 만약에 팀원분들끼리 도와드릴 수 있는 내용이 있으면 공유를 해주셔도 돼요 액션을 만들어 보셨으니까 다 기본적으로 액션 탭에서 워크플로우를 만드셨거나 아니면은 그냥 정적으로 야물파일 하나씩 만드셨겠죠 저는 주로 어떻게 만드냐면 여기다 그냥 만듭니다. addfile 하고 자기 워크플로우가 있으면 그거를 수정하셔도 돼요 .github 폴더를 만들고 여기에 이제 뭐 저는 demo라고 할게 demo.yaml 파일 이렇게 해서 commit, change를 하기 전에 우선 yaml 파일에 대한 name을 정해줘야 돼요 여기서 name 해서 품속으로 메모를 이렇게 쓸게요 꼭 따라하실 필요 없습니다 이렇게 하면은 저는 기본적으로 메인 브랜치에다가 넣을 건데 우선 이렇게 해서 workflow 파일을 하나씩 만들어 보시고 기존 게 있으면 그냥 쓰셔도 돼요 이제 저희가 CI 환경을 돌리기 위해서 가장 필요한 것들이 나열을 해보면 대략적으로 첫 번째로 뭐가 있을까 이게 어디서 도는지 이 워크플로우가 어디서 공적할지 이거를 여러분들은 셀프 호스티드 러너로 꾸리셨던 거 같아요 맞죠? 네? 이걸 꾸리셨는데 이걸 어디에 꾸리셨어요 혹시? 본인 맥을 러너로 쓰셨나요? 맞아요? 데스크탑을? 저희는 이거를 아까의 구조로 잠깐 보여드리면 아까 오전에 들었던 얘기 중에 이거를 이 점선 아래, 위에가 이제 퍼블릭이고 아래가 사내 애저 환경이에요 그게 이제 애저 쉐어드 인프라존이라고 해서 KT에저 산에 안에서 돌린단 말이죠 여기에 대한 구성을 저희 팀에서 관리하고 있는데 보여드릴 수 있을 것 같아서 현재 러너가 지금 AKS형으로 러너를 돌아가는 건 그 Kubernetes 환경에서 러너를 처리할 수도 있고 VM으로 돌릴 수도 있어요 근데 지금은 VM으로만 먼저 보여드릴게요 DevOps 구독에 여기 보이는 러너 1분부터 5번까지가 전사에서 쓰는 CI 워크플로우 액션을 처리하는 서버들이에요 그래서 얘네가 하나의 러너 그룹으로 묶여서 클러스터링 되어 있는 상태고 이거를 GitHub 어드밍 권한으로 조금 더 보여드리자면 여기서 권한이 있어야 볼 수 있는 거라서 여러분들이 그 맥에 직접 구성하신 셀포스트 러너를 KT에서는 Azure의 VM으로 구성해 놨고 거기에 대한 runner group으로 kt-dev-self-hosting-runner-group 이라는 걸 명시해서 쓰고 있어요 여기 이거를 좀 뜯어 보면은 아까 방금 구독에서 보여드린 이 vm 자원들 다섯 개 있잖아요 얘네가 이제 다 물려 있어요 이렇게 1번 common 기우치고 1번 2번 종료를 안 되네 3번 4번 하고 오버는 용도가 달라서 다른데 있고 어쨌든 얘네들이 VM 기준으로 빌드하는 애들이고 이 아래에 파이파이 하고선 ARC 라는 게 있죠 ARC 라는 다섯 대가 이제 Kubernetes에 구성되어 있는 러너를 처리할 리스너파드라고 생각하시면 됩니다 그러니까 만약에 틱톱 엔터프라이즈에서 파이파이 ARC 라는 이 러너를 쓸 거예요 그러면은 여러분들은 쉽게 그동안 했던 걸로 보면은 그냥 아마도 이렇게 하셨을 것 같아요 5분 투 레이티스트 뭐 이런거 썼겠죠? 5분 투 레이티스트라 하면은 아까 얘기한 github에서 호스팅하는 그 github 자원에 호스티드 러너를 써서 그렇게 쓸 수도 있고 근데 대신 여기에 라벨을 우리는 이렇게 가야 셀프 호스티드 러너를 쓸 수 있다는 거죠 여기 정의하는 방법은 이 옆에 조그맣게 라벨이 하나 있어요 이게 각각의 파드들을 구분하는 단위에요 그러니까 어떤 러너에서 이걸 돌리게 할 건지 선택하는 거기 때문에 만약에 본인이 파이썬을 쓴다 그러면 이 라벨을 쓰시면 되고 내가 만약에 자바를 써 내 빌드 패키지 툴이 그레이드리아 그럼 그레이드를 ARC로 쓰면 되고 난 NPM 빌드 할 거야, Vue 빌드 할 거야 이러면 NPM ARC 뭐 이런 식으로 가져다 쓰시면 되는데 이거는 아직 설정을 하지 마시고 왜냐하면 이걸 진행하면서 우리가 또 테스트할 게 하나 더 있거든요 그래서 지금은 이론적으로만 알아두시고 이렇게 해서 쓸 수 있습니다 셀프 호스티드 러너를 그래서 정리를 하자면 크게 VM 다섯 대를 꾸리고 있고 그다음에 Kubernetes 형도 쓰고 있다 이거를 구분하는 이유는 처음에 이제 VM을 구성을 했을 때는 Kubernetes의 이 ARC라는 게 조금 더 구성하기가 복잡해요 그러니까 action-runner-controller라는 게 있는데 ARC로 그려서 이거를 이제 github-action에 self-host-runner를 Kubernetes로 돌리는 거거든요 근데 이게 좀 설정이 오래 걸려서 초기에 저희는 VM으로 먼저 셋업을 해둔 거고 지금은 이제 좀 확장 단계에서 이 AKS에 러너를 구성을 해놨다고 생각을 하시면 됩니다 그래서 그냥 참고만 해주시고 그러면은 이거를 사용자가 이 라벨을 어떻게 쓰는지 알아야 되잖아요 어떤 선택지가 있는지 본인들이 알아야 되기 때문에 그거에 대한 설정을 우리는 Organization에서 해줍니다 여기서 어떤 러너 그룹을 불러올지에 대한 설정 그래서 이 Organization 설정에서 Settings에 들어가서 이 안에 Action이라는 탭이 있어요 Action에 이제 러너 그룹이 있거든요 러너그룹에 여기 저희가 명시해 둔 거 있죠 self-hosted runner group을 쓸 수 있다라고 엔터프라이즈에 의해서 공유되어 있죠 그래서 이 organization은 이 러너그룹을 쓸 수 있고 요거를 들어가시면은 직접 라벨을 볼 수 있어요 아까 봤던 거랑 화면이 동일한데 들어가는 그 진입점이 다른 거예요 그래서 나는 만약에 VM에서 그레이드를 돌릴 거야 그러면은 여기에 있는 라벨 쓰시면 되고 그 다음에 아니면 난 Kubernetes 환경에서 그레이드를 돌릴 거야 그럼 이 라벨 쓰시면 됩니다 여기에 되게 라벨이 선택지가 다양한데 이것을 조금 더 디테일한 옵션으로 설명을 드리자면 먼저 이 화면에서 보이는 이 VM들은 말씀드린 그 VM들이고 여기에 떠 있는 이 라벨이 붙어 있는 파드들은 리스너 파드예요 그러니까 GitHub Self-hosting에서 워크플로우가 실행됐을 때 이 라벨로 딱 트리거되는 리스너 파드가 받아와서 이 파이파이 ARC 있죠 얘가 직접 컨트롤하는 그 직접 처리를 하는 러닝파드라고 생각하시면 돼요 그러니까 정확히는 이 파이파이 ARC가 받아와서 여기 떠 있는 이 파드한테 실질적인 액션을 주는 거죠 그러면은 빌드나 아니면 CI 전체적인 작업을 하는 거는 이 컨트롤 파드가 하는 거죠 그래서 그렇게 구분되어 있고 Kubernetes를 조금 이해하실 수 있다면 그렇게 할 수 있고 당연히 이제 Kubernetes의 장점들을 가져갈 수 있겠죠 예를 들어 한 번에 다양한 프로젝트에서 빌드 요청이 들어온다 뭐 카플로가 갑자기 실행됐다 그러면은 당연하게 이제 파드들끼리 리스케쥴 돼서 이렇게 스케일아웃 되는 것도 가능하고 저희는 애저에서 AKS의 노드풀이라고 해서 갑자기 내용이 많아지나? AKS를 다 꾸려 보셨나요? 혹시 아니면은 생성돼 있는 거를 써보신 건가요? 샌드박스 같은 거 실습하실 때 간단하게 말해서 노드풀이라고 하면은 지금 보고 계시는 이 AKS가 이 파드들을 띄워놓은 AKS예요 그러면 이 파드들은 이 AKS 안에 떠 있는데 Kubernetes는 기본적으로 VM이라고 하면 가상머신이나 그런 걸 뜻하는데 AKS는 노드들을 클러스터링해서 스케줄링하는 Kubernetes 서비스니까 얘네들을 뒷받침할 하드웨어가 필요하죠 걔네를 노드풀이라고 해요 노드풀이라고 하면은 노드풀을 논리적으로 구분해서 예를 들어 자동 크기 조정해서 스케일링 셋을 해 놓으면은 이 노드풀에 들어가 있는 노드들이 감당 불가능한 만큼 뭔가 리퀘스트나 트래픽이 들어오면은 자동적으로 VM들을 눌러주는 거죠 뒤에 있는 노드들을 그런 식으로 해서 이제 노드풀을 관리하고 여기에 스케일링 방법으로 자동 크기 조정이 들어가 있기 때문에 만약에 우리가 한번에 여기에